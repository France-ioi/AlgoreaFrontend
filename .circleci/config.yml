version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.15

commands:
  deploy-to-s3:
    parameters:
      # from current dir, with trailing slash
      from:
        type: string
      bucket:
        type: string
      # starting with a slash, no trailing slash
      path:
        type: string
    steps:
      - aws-s3/sync:
          from: << parameters.from >>
          to: s3://<< parameters.bucket >><< parameters.path >>
          overwrite: false
          arguments: >-
            --acl public-read
            --exclude "index.html"
            --exclude "favicon.ico"
            --cache-control 'max-age=86400'
      - aws-s3/copy:
          from:  << parameters.from >>index.html
          to: s3://<< parameters.bucket >><< parameters.path >>/index.html
          arguments: >-
            --acl public-read
            --cache-control 'max-age=10'
      - aws-s3/copy:
          from:  << parameters.from >>favicon.ico
          to: s3://<< parameters.bucket >><< parameters.path >>/favicon.ico
          arguments: >-
            --acl public-read
            --cache-control 'max-age=10'

jobs:
  # deps has to be run before the other jobs and basically run "npm install" and cache it
  deps:
    docker: &node_image
      - image: circleci/node:12.16
    steps:
      - checkout
      # cache is used between builds, we use the cache if the lock file has not changed
      - restore_cache: &CACHEKEY
          key: deps-{{ checksum "package-lock.json" }}
      - run: npm install
      # workspace persistence is used between jobs of the same builds (here includes the code and node modules)
      - persist_to_workspace:
          root: ./
          paths:
            - "*"
      - save_cache:
          <<: *CACHEKEY
          paths:
            - ./node_modules

  lint:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - run: ./node_modules/.bin/ng lint

  build-core:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - run: ./node_modules/.bin/ng build core --prod
      - persist_to_workspace:
          root: ./
          paths:
            - dist/core

  build:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - run: ./node_modules/.bin/ng build algorea --configuration ci --base-href ./ --progress=false
      - persist_to_workspace:
          root: ./
          paths:
            - dist/algorea

  tests:
    docker: &node_browsers_image
      - image: circleci/node:12.16-browsers
    steps:
      - attach_workspace:
          at: ./
      - run: echo "" > lcov.info.combined
      - run:
          name: tests for "algorea"
          command: ./node_modules/.bin/ng test algorea --code-coverage --karma-config .circleci/karma.conf.js --no-watch --no-progress --browsers=ChromeHeadlessCI
      - run: cat lcov.info >> lcov.info.combined
      - run:
          name: tests for "core"
          command: ./node_modules/.bin/ng test core --code-coverage --karma-config .circleci/karma.conf.js --no-watch --no-progress --browsers=ChromeHeadlessCI
      - run: cat lcov.info >> lcov.info.combined
      - run:
          name: tests for "dev"
          command: ./node_modules/.bin/ng test dev --code-coverage --karma-config .circleci/karma.conf.js --no-watch --no-progress --browsers=ChromeHeadlessCI
      - run: cat lcov.info.combined >> lcov.info # putting all cov reports together
      - run:
          name: CodeCov (tool sending coverage reports to Codecov.io)
          command: bash <(curl -s https://codecov.io/bash)

  e2e:
    docker: *node_browsers_image
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: e2e for "algorea"
          command: ./node_modules/.bin/ng e2e algorea --protractor-config=e2e/protractor-ci.conf.js
      - run:
          name: e2e for "dev"
          command: ./node_modules/.bin/ng e2e dev --protractor-config=projects/dev/e2e/protractor-ci.conf.js


  deploy-branch:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-central-1
    steps:
      - attach_workspace:
          at: ./
      - deploy-to-s3:
          from: ./dist/algorea/
          bucket: $DEPLOYMENT_BUCKET
          path: /branch/<< pipeline.git.branch >>

  deploy-master:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-central-1
    steps:
      - attach_workspace:
          at: ./
      - deploy-to-s3:
          from: ./dist/algorea/
          bucket: $DEPLOYMENT_BUCKET
          path: ""

workflows:
  version: 2
  default:
    jobs:
      - deps
      - lint:
          requires:
          - deps
      - build-core:
          requires:
            - deps
      - build:
          requires:
            - build-core
      - tests:
          requires:
            - build-core
      - e2e:
          requires:
            - build-core
      - deploy-branch:
          requires:
            - build
      - deploy-master:
          filters:
            branches:
              only: master
          requires:
            - build
