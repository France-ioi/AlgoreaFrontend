version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.15
  browser-tools: circleci/browser-tools@1.5.1

commands:

  deploy-to-s3-shortcache:
    parameters:
      # from current dir, with trailing slash
      from:
        type: string
      bucket:
        type: string
      # starting with a slash, no trailing slash
      path:
        type: string
      lang:
        type: string
    steps:
      - aws-s3/copy:
          from:  << parameters.from >>index.html
          to: s3://<< parameters.bucket >><< parameters.path >>/index.html
          arguments: >-
            --cache-control 'max-age=300'
      - aws-s3/copy:
          from:  << parameters.from >><< parameters.lang >>/index.html
          to: s3://<< parameters.bucket >><< parameters.path >>/<< parameters.lang >>/index.html
          arguments: >-
            --cache-control 'max-age=10'
      - aws-s3/copy:
          from:  << parameters.from >><< parameters.lang >>/assets/config.js
          to: s3://<< parameters.bucket >><< parameters.path >>/<< parameters.lang >>/assets/config.js
          arguments: >-
            --cache-control 'max-age=10'

  deploy-to-s3-v2:
    parameters:
      # from current dir, with trailing slash
      from:
        type: string
      bucket:
        type: string
      # starting with a slash, no trailing slash
      path:
        type: string
    steps:
      - aws-s3/sync:
          from: << parameters.from >>
          to: s3://<< parameters.bucket >><< parameters.path >>
          overwrite: false
          arguments: >-
            --cache-control 'max-age=31536000'

  build:
    parameters:
      # the 2 letters deployment language
      lang:
        type: string
      # path (from the root of the domain) where it will be deployed (with heading and trailing slash)
      path:
        type: string
      # domain on which the assets are served
      assetDomain:
        type: string
      # domain on which the assets are served
      baseHref:
        type: string
    steps:
      - run: echo "export const version = '`git describe --always`';" > ./src/version.ts
      - run: npm run injectDeployUrlForAssets --url='//<< parameters.assetDomain >><< parameters.path >>'
      - run: npx ng build --configuration production-<< parameters.lang >> --base-href << parameters.baseHref >> --deploy-url //<< parameters.assetDomain >><< parameters.path >> --progress=false
      - run: npm run postBuild

jobs:
  # deps has to be run before the other jobs and basically run "npm install" and cache it
  deps:
    docker: &node_image
      - image: cimg/node:22.16.0
    steps:
      - checkout
      # cache is used between builds, we use the cache if the lock file has not changed
      - restore_cache: &CACHEKEY
          key: deps-{{ checksum "package-lock.json" }}
      - run: npm install
      # workspace persistence is used between jobs of the same builds (here includes the code and node modules)
      - persist_to_workspace:
          root: ./
          paths:
            - "*"
      - save_cache:
          <<: *CACHEKEY
          paths:
            - ./node_modules
            - ./.angular

  lint:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - run: npm run lint

  push-translation-source:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - run: npm install -g @crowdin/cli
      - run: npx ng extract-i18n
      - run: crowdin push sources -s messages.xlf -t src/locale/messages.%two_letters_code%.xlf

  fetch-translations:
    docker: *node_image
    steps:
      - checkout
      - run: npm install -g @crowdin/cli
      - run: touch messages.xlf
      - run: crowdin pull --no-progress --keep-archive -s messages.xlf -t src/locale/messages.%two_letters_code%.xlf
      - persist_to_workspace:
          root: ./
          paths:
            - src/locale

  build-branch-en:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - build:
          lang: en
          path: /branch/<< pipeline.git.branch >>/en/
          assetDomain: assets.algorea.org
          baseHref: /branch/<< pipeline.git.branch >>/
      - persist_to_workspace:
          root: ./
          paths:
            - dist/algorea/browser/en

  build-master:
    docker: *node_image
    parameters:
      lang:
        type: string
        default: en
    steps:
      - attach_workspace:
          at: ./
      - build:
          lang: << parameters.lang >>
          path: /<< parameters.lang >>/
          assetDomain: assets.algorea.org
          baseHref: /
      - persist_to_workspace:
          root: ./
          paths:
            - dist/algorea/browser/<< parameters.lang >>

  build-version:
    docker: *node_image
    parameters:
      lang:
        type: string
        default: en
    steps:
      - attach_workspace:
          at: ./
      - build:
          lang: << parameters.lang >>
          path: /frontend/releases/<< pipeline.git.tag >>/<< parameters.lang >>/
          assetDomain: static5.algorea.org
          baseHref: /
      - run:
          when:
            equal: [ << parameters.lang >>, en ]
          command: npx sentry-cli sourcemaps inject --org france-ioi --project algorea ./dist/algorea/browser/en && npx sentry-cli sourcemaps upload --org france-ioi --project algorea ./dist/algorea/browser/en
      - persist_to_workspace:
          root: ./
          paths:
            - dist/algorea/browser/<< parameters.lang >>

  tests:
    docker: &node_browsers_image
      - image: cimg/node:22.16.0-browsers
    steps:
      - browser-tools/install-browser-tools
      - attach_workspace:
          at: ./
      - run: npx ng test --code-coverage --karma-config .circleci/karma.conf.js --no-watch --no-progress --browsers=ChromeHeadlessCI
      - run:
          name: CodeCov (tool sending coverage reports (lcov.info) to Codecov.io)
          command: bash <(curl -s https://codecov.io/bash)

  e2e-no-parallelism:
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-noble
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run: npx playwright test --grep @no-parallelism --workers=1
      - persist_to_workspace:
          root: ./
          paths:
            - blob-report

  e2e-parallelism:
    parameters:
      project:
        type: string
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-noble
    parallelism: 2
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run: SHARD="$((${CIRCLE_NODE_INDEX}+1))"; npx playwright test --shard=${SHARD}/${CIRCLE_NODE_TOTAL} --grep-invert @no-parallelism --project=<< parameters.project >>
      - persist_to_workspace:
          root: ./
          paths:
            - blob-report

  e2e-gen-report:
    docker: *node_image
    steps:
      - attach_workspace:
          at: ./
      - run: npx playwright merge-reports --reporter html ./blob-report
      - persist_to_workspace:
          root: ./
          paths:
            - playwright-report

  e2e-upload-report:
    docker:
      - image: circleci/python:2.7
    environment:
      AWS_REGION: eu-central-1
    steps:
      - attach_workspace:
          at: ./
      - aws-s3/sync:
          from: playwright-report
          to: s3://$DEPLOYMENT_BUCKET/branch/<< pipeline.git.branch >>/playwright-report
          overwrite: false
          arguments: >-
            --cache-control 'max-age=20'

  e2e-comment-PR:
    docker:
      - image: circleci/ruby:2.6-node-browsers-legacy
    steps:
      - run:
          name: Install GHI
          command: |
            curl -sL https://raw.githubusercontent.com/stephencelis/ghi/master/ghi > ghi
            chmod 755 ghi
            sudo mv ghi /usr/local/bin
      - run:
          name: Check Token
          command: |
            if [[ -z "${GHI_TOKEN}" ]]; then
              echo "GHI_TOKEN not set"
              /bin/false
            fi
      - run:
          name: Send Comment
          command: |
            GH_LOGIN=$(curl -sS -H "Authorization: token $GHI_TOKEN" https://api.github.com/user | jq '.login' --raw-output)
            echo "Authenticated with $GH_LOGIN"
            PR_URL=${CIRCLE_PULL_REQUEST}
            PR_ID=${PR_URL##*/}
            echo "PR_ID=$"
            if [ -z $PR_ID ]; then
              echo "No PR found, skipping"
            else
              if [ $(ghi comment --list $PR_ID -- ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} | grep -c "E2E test report on:") -ge 1 ]; then
              echo "Already commented, skip"
              else
              ghi comment -m "[auto-generated message] E2E test report on: https://assets.algorea.org/branch/<< pipeline.git.branch >>/playwright-report/index.html" $PR_ID -- ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
              fi
            fi

  deploy-branch:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-central-1
    steps:
      - attach_workspace:
          at: ./
      - run: echo '<html><head><script>window.location.replace("en/");</script></head></html>' > dist/algorea/browser/index.html
      - deploy-to-s3-v2:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: /branch/<< pipeline.git.branch >>
      - deploy-to-s3-shortcache:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: /branch/<< pipeline.git.branch >>
          lang: en

  deploy-master:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-central-1
    steps:
      - attach_workspace:
          at: ./
      - run: echo '<html><head><script>window.location.replace("en/");</script></head></html>' > dist/algorea/browser/index.html
      - deploy-to-s3-v2:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: ""
      - deploy-to-s3-shortcache:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: ""
          lang: en
      - deploy-to-s3-shortcache:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: ""
          lang: fr
      - deploy-to-s3-shortcache:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: ""
          lang: de
      - deploy-to-s3-shortcache:
          from: ./dist/algorea/browser/
          bucket: $DEPLOYMENT_BUCKET
          path: ""
          lang: it

  deploy-version:
    docker:
      - image: 'circleci/python:2.7'
    environment:
      AWS_REGION: eu-central-1
    steps:
      - attach_workspace:
          at: ./
      - deploy-to-s3-v2:
          from: ./dist/algorea/browser/
          bucket: $FRONTEND_PUBLIC_BUCKET
          path: /frontend/releases/<< pipeline.git.tag >>/

workflows:
  version: 2
  default:
    jobs:
      - deps:
          filters:
            tags:
              only: /^v\d+\.\d+\..*/
            branches:
              only: /.*/
      - lint:
          requires:
          - deps
      - push-translation-source:
          requires:
            - deps
          context: crowdin
          filters:
            branches:
              only: master
      - fetch-translations:
          requires:
            - push-translation-source # so that new strings appears in the translations (even if not translated)
          context: crowdin
          filters:
            tags:
              only: /^v\d+\.\d+\..*/
            branches:
              only: master
      - build-branch-en:
          requires:
            - deps
          filters:
            branches:
              ignore: master
      - tests:
          requires:
            - deps
      - e2e-no-parallelism:
          requires:
            - deps
      - e2e-parallelism:
          matrix:
            parameters:
              project: [ chromium, firefox ]
          requires:
            - deps
      - e2e-gen-report:
          requires:
            - e2e-no-parallelism
            - e2e-parallelism-chromium
            - e2e-parallelism-firefox
          filters:
            branches:
              ignore: master
      -  e2e-upload-report:
          requires:
            - e2e-gen-report
      -  e2e-comment-PR:
          requires:
            - e2e-upload-report
      - deploy-branch:
          requires:
            - build-branch-en
          filters:
            branches:
              ignore: master
      - build-master:
          name: build-master-<< matrix.lang >>
          matrix:
            parameters:
              lang: [ en, fr, de, it ]
          requires:
            - deps
            - fetch-translations
          filters:
            branches:
              only: master
      - deploy-master:
          requires:
            - build-master-en
            - build-master-fr
            - build-master-it
            - build-master-de
            - tests
            - e2e-no-parallelism
            - e2e-parallelism-chromium
            - e2e-parallelism-firefox
          filters:
            branches:
              only: master
      - build-version:
          name: build-version-<< matrix.lang >>
          matrix:
            parameters:
              lang: [ en, fr, de, it ]
          filters:
            tags:
              only: /^v\d+\.\d+\..*/
            branches:
              ignore: /.*/
          requires:
            - deps
            - fetch-translations
          context: sentry-sourcemaps
      - deploy-version:
          filters:
            tags:
              only: /^v\d+\.\d+\..*/
            branches:
              ignore: /.*/
          requires:
            - build-version-en
            - build-version-fr
            - build-version-de
            - build-version-it
          context: aws-prod
